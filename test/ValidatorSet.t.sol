pragma solidity ^0.8.10;

import "../lib/Deployer.sol";

contract ValidatorSetTest is Deployer {
  using RLPEncode for *;

  event validatorSetUpdated();
  event validatorJailed(address indexed validator);
  event validatorEmptyJailed(address indexed validator);
  event batchTransfer(uint256 amount);
  event batchTransferFailed(uint256 indexed amount, string reason);
  event batchTransferLowerFailed(uint256 indexed amount, bytes reason);
  event systemTransfer(uint256 amount);
  event directTransfer(address payable indexed validator, uint256 amount);
  event directTransferFail(address payable indexed validator, uint256 amount);
  event deprecatedDeposit(address indexed validator, uint256 amount);
  event validatorDeposit(address indexed validator, uint256 amount);
  event validatorSharing(address indexed validator, uint256 amount);
  event validatorMisdemeanor(address indexed validator, uint256 amount);
  event validatorFelony(address indexed validator, uint256 amount);
  event failReasonWithStr(string message);
  event unexpectedPackage(uint8 channelId, bytes msgBytes);
  event paramChange(string key, bytes value);
  event feeBurned(uint256 amount);
  event validatorEnterMaintenance(address indexed validator);
  event validatorExitMaintenance(address indexed validator);

  uint256 public totalInComing;
  uint256 public burnRatio;
  uint256 public burnRatioScale;
  uint256 public maxNumOfWorkingCandidates;
  uint256 public numOfCabinets;
  uint256 public sharingRewardPercent;
  uint256 public sharingRewardScale;
  address public coinbase;
  address[] public validators;

  mapping(address => bool) cabinets;

  function setUp() public {
    bytes memory validatorCode =
    hex"6080604052600436106104525760003560e01c8063853230aa1161023f578063c6d3394511610139578063eb57e202116100b6578063fc134fe81161007a578063fc134fe814610e20578063fc3e590814610e35578063fccc281314610e4a578063fd4ad81f14610e5f578063fd6a687914610ea257610452565b8063eb57e20214610d88578063eda5868c14610dbb578063f340fa0114610dd0578063f92eb86b14610df6578063f9a2bbc714610e0b57610452565b8063daacdb66116100fd578063daacdb6614610d1f578063dc927faf14610d34578063e086c7b114610d49578063e1c7392a14610d5e578063e40716a114610d7357610452565b8063c6d3394514610ccb578063c81b166214610ce0578063c8509d81146109ef578063d68fb56a14610cf5578063d86222d514610d0a57610452565b8063a1a11bf5116101c7578063ac4317511161018b578063ac43175114610ba3578063ad3c9da614610c6e578063b7ab4db514610ca1578063b8cf4ef114610cb6578063bf9f49951461070757610452565b8063a1a11bf514610b3a578063a5422d5c14610b4f578063a78abc1614610b64578063aaf5eb6814610b79578063ab51bb9614610b8e57610452565b80639369d7de1161020e5780639369d7de14610ad157806396713da914610ae65780639dc0926214610afb5780639fe0f81614610b10578063a0dc275814610b2557610452565b8063853230aa1461099b5780638624988214610a745780638b5ad0c914610a895780638d19a41014610a9e57610452565b80634bf6c882116103505780636e2e7e98116102d857806378dfed4a1161029c57806378dfed4a1461099b5780637942fd05146109b05780637a84ca2a146109c557806381650b62146109da578063831d65d1146109ef57610452565b80636e2e7e98146109325780636e47b4821461094757806370fd5bad1461095c578063718a8aa81461097157806375d47a0a1461098657610452565b806355614fcc1161031f57806355614fcc1461082c578063565c56b31461085f5780635667515a146108925780635d77156c146108a75780636969a25c146108bc57610452565b80634bf6c882146107885780634df6e0c31461079d5780635192c82c1461080257806351e806721461081757610452565b8063219f22d5116103de5780633de0f0d8116103a25780633de0f0d81461066b5780633dffc3871461070757806343756e5c1461073257806345cf9daf14610747578063493279b11461075c57610452565b8063219f22d51461065657806323b731851461066b578063321d398a146106805780633365af3a146106aa57806335409f7f146106d457610452565b80630dde9135116104255780630dde9135146104ec5780630e2374a5146105015780631182b87514610532578063152ad3b81461062c5780631ff180691461064157610452565b806304c4fec61461045757806307a568471461046e5780630a46b1d7146104955780630bee7a67146104be575b600080fd5b34801561046357600080fd5b5061046c610eb7565b005b34801561047a57600080fd5b50610483610f4a565b60408051918252519081900360200190f35b3480156104a157600080fd5b506104aa610f50565b604080519115158252519081900360200190f35b3480156104ca57600080fd5b506104d3610f59565b6040805163ffffffff9092168252519081900360200190f35b3480156104f857600080fd5b50610483610f5e565b34801561050d57600080fd5b50610516610f64565b604080516001600160a01b039092168252519081900360200190f35b34801561053e57600080fd5b506105b76004803603604081101561055557600080fd5b60ff8235169190810190604081016020820135600160201b81111561057957600080fd5b82018360208201111561058b57600080fd5b803590602001918460018302840111600160201b831117156105ac57600080fd5b509092509050610f6a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156105f15781810151838201526020016105d9565b50505050905090810190601f16801561061e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561063857600080fd5b506104aa6111fc565b34801561064d57600080fd5b50610483611205565b34801561066257600080fd5b506104d361120b565b34801561067757600080fd5b50610483611210565b34801561068c57600080fd5b506104aa600480360360208110156106a357600080fd5b5035611216565b3480156106b657600080fd5b506104aa600480360360208110156106cd57600080fd5b50356112e5565b3480156106e057600080fd5b5061046c600480360360208110156106f757600080fd5b50356001600160a01b0316611396565b34801561071357600080fd5b5061071c6114f5565b6040805160ff9092168252519081900360200190f35b34801561073e57600080fd5b506105166114fa565b34801561075357600080fd5b50610483611500565b34801561076857600080fd5b50610771611506565b6040805161ffff9092168252519081900360200190f35b34801561079457600080fd5b5061071c61150b565b3480156107a957600080fd5b506107b2611510565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156107ee5781810151838201526020016107d6565b505050509050019250505060405180910390f35b34801561080e57600080fd5b5061048361160b565b34801561082357600080fd5b50610516611611565b34801561083857600080fd5b506104aa6004803603602081101561084f57600080fd5b50356001600160a01b0316611617565b34801561086b57600080fd5b506104836004803603602081101561088257600080fd5b50356001600160a01b031661164c565b34801561089e57600080fd5b5061071c61169d565b3480156108b357600080fd5b506104d36116a2565b3480156108c857600080fd5b506108e6600480360360208110156108df57600080fd5b50356116a7565b604080516001600160a01b039788168152958716602087015293909516848401526001600160401b0390911660608401521515608083015260a082019290925290519081900360c00190f35b34801561093e57600080fd5b5061048361170b565b34801561095357600080fd5b50610516611711565b34801561096857600080fd5b5061071c611717565b34801561097d57600080fd5b5061071c61171c565b34801561099257600080fd5b50610516611721565b3480156109a757600080fd5b50610483611727565b3480156109bc57600080fd5b5061071c61172d565b3480156109d157600080fd5b50610483611732565b3480156109e657600080fd5b506104d3611738565b3480156109fb57600080fd5b5061046c60048036036040811015610a1257600080fd5b60ff8235169190810190604081016020820135600160201b811115610a3657600080fd5b820183602082011115610a4857600080fd5b803590602001918460018302840111600160201b83111715610a6957600080fd5b50909250905061173d565b348015610a8057600080fd5b506104836117f0565b348015610a9557600080fd5b506104836117f6565b348015610aaa57600080fd5b5061048360048036036020811015610ac157600080fd5b50356001600160a01b03166117fc565b348015610add57600080fd5b5061046c611871565b348015610af257600080fd5b5061071c61198b565b348015610b0757600080fd5b50610516611990565b348015610b1c57600080fd5b50610483611996565b348015610b3157600080fd5b5061048361199b565b348015610b4657600080fd5b506105166119a0565b348015610b5b57600080fd5b506105b76119a6565b348015610b7057600080fd5b506104aa6119c5565b348015610b8557600080fd5b506104836119ce565b348015610b9a57600080fd5b506104d361169d565b348015610baf57600080fd5b5061046c60048036036040811015610bc657600080fd5b810190602081018135600160201b811115610be057600080fd5b820183602082011115610bf257600080fd5b803590602001918460018302840111600160201b83111715610c1357600080fd5b919390929091602081019035600160201b811115610c3057600080fd5b820183602082011115610c4257600080fd5b803590602001918460018302840111600160201b83111715610c6357600080fd5b5090925090506119d7565b348015610c7a57600080fd5b5061048360048036036020811015610c9157600080fd5b50356001600160a01b0316612564565b348015610cad57600080fd5b506107b2612576565b348015610cc257600080fd5b50610483612659565b348015610cd757600080fd5b50610483611717565b348015610cec57600080fd5b5061051661265e565b348015610d0157600080fd5b50610483612664565b348015610d1657600080fd5b506104836126a3565b348015610d2b57600080fd5b506104836126af565b348015610d4057600080fd5b506105166126b5565b348015610d5557600080fd5b506104836126bb565b348015610d6a57600080fd5b5061046c6126c0565b348015610d7f57600080fd5b506104836128c3565b348015610d9457600080fd5b5061046c60048036036020811015610dab57600080fd5b50356001600160a01b03166128c9565b348015610dc757600080fd5b506104d36129d7565b61046c60048036036020811015610de657600080fd5b50356001600160a01b03166129dc565b348015610e0257600080fd5b50610483612cd4565b348015610e1757600080fd5b50610516612cda565b348015610e2c57600080fd5b50610483612ce0565b348015610e4157600080fd5b5061071c611996565b348015610e5657600080fd5b50610516612ce6565b348015610e6b57600080fd5b50610e8960048036036020811015610e8257600080fd5b5035612cec565b6040805192835290151560208301528051918290030190f35b348015610eae57600080fd5b50610516612d1a565b6000610ec2336117fc565b9050600b8181548110610ed157fe5b600091825260209091206001601690920201015460ff16610f2e576040805162461bcd60e51b81526020600482015260126024820152716e6f7420696e206d61696e74656e616e636560701b604482015290519081900360640190fd5b6000610f38612664565b9050610f45338383612d20565b505050565b60095481565b60115460ff1681565b606481565b61138881565b61200181565b60005460609060ff16610fc0576040805162461bcd60e51b81526020600482015260196024820152781d1a194818dbdb9d1c9858dd081b9bdd081a5b9a5d081e595d603a1b604482015290519081900360640190fd5b33612000146110005760405162461bcd60e51b815260040180806020018281038252602f815260200180616a47602f913960400191505060405180910390fd5b600b546110a55761100f615f36565b60015460005b818110156110a157600b8054600181018255600091909152835160008051602061639283398151915260169092029182019081556020850151600080516020616ad08339815191528301805460ff19169115159190911790556040850151859261109391600080516020616417833981519152909101906014615f5a565b505050806001019050611015565b5050505b6110ad615f94565b60006110ee85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612f1492505050565b915091508061110a57611101606461306d565b925050506111f5565b815160009060ff1661112a5761112383602001516130ce565b90506111c1565b825160ff16600114156111bd57826020015151600114611197577f70e72399380dcfb0338abc03dc8d47f9f470ada8e769c9a78d644ea97385ecb26040518080602001828103825260258152602001806162d86025913960400191505060405180910390a15060676111b8565b61112383602001516000815181106111ab57fe5b6020026020010151613fe0565b6111c1565b5060655b63ffffffff81166111e657505060408051600081526020810190915291506111f59050565b6111ef8161306d565b93505050505b9392505050565b60075460ff1681565b60035481565b606881565b61271081565b600154600090821061122a575060006112e0565b60006001600160a01b03166001838154811061124257fe5b60009182526020909120600490910201546001600160a01b03161480611272575060085415806112725750600a54155b80611281575060085460095410155b806112925750611290826112e5565b155b806112bb57506000600b83815481106112a757fe5b906000526020600020906016020160000154115b806112cf575060016112cb612576565b5111155b156112dc575060006112e0565b5060015b919050565b60015460009082106112f9575060006112e0565b600b548210611336576001828154811061130f57fe5b9060005260206000209060040201600201601c9054906101000a900460ff161590506112e0565b6001828154811061134357fe5b9060005260206000209060040201600201601c9054906101000a900460ff161580156113905750600b828154811061137757fe5b600091825260209091206001601690920201015460ff16155b92915050565b33611001146113d65760405162461bcd60e51b8152600401808060200182810382526029815260200180616af06029913960400191505060405180910390fd5b600b5461147b576113e5615f36565b60015460005b8181101561147757600b8054600181018255600091909152835160008051602061639283398151915260169092029182019081556020850151600080516020616ad08339815191528301805460ff19169115159190911790556040850151859261146991600080516020616417833981519152909101906014615f5a565b5050508060010190506113eb565b5050505b6001600160a01b0381166000908152600460205260409020548061149f57506114f2565b6001810390506000600b82815481106114b457fe5b600091825260209091206001601690920201015460ff1690506114d78383614157565b80156114e05750805b15610f45576009805460001901905550505b50565b600181565b61100181565b60085481565b603881565b600881565b600e54600c546060919080611523575060155b606061152d612576565b905081815111611541579250611608915050565b82828251031015611553578181510392505b82156115875760c8430461156e8282868603600088886144f8565b6115858282868603878703888989895103016144f8565b505b6060826040519080825280602002602001820160405280156115b3578160200160208202803683370190505b50905060005b83811015611601578281815181106115cd57fe5b60200260200101518282815181106115e157fe5b6001600160a01b03909216602092830291909101909101526001016115b9565b5093505050505b90565b60065481565b61200081565b6001600160a01b0381166000908152600460205260408120548061163f5760009150506112e0565b600019016111f5816112e5565b6001600160a01b038116600090815260046020526040812054806116745760009150506112e0565b60018082038154811061168357fe5b906000526020600020906004020160030154915050919050565b600081565b606781565b600181815481106116b457fe5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0392831694509082169291821691600160a01b81046001600160401b031691600160e01b90910460ff169086565b60105481565b61100581565b600281565b601081565b61100881565b6103e881565b600b81565b600c5481565b606681565b336120001461177d5760405162461bcd60e51b815260040180806020018281038252602f815260200180616a47602f913960400191505060405180910390fd5b7f41ce201247b6ceb957dcdb217d0b8acb50b9ea0e12af9af4f5e7f38902101605838383604051808460ff1660ff168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a1505050565b60025481565b600a5481565b6001600160a01b03811660009081526004602052604081205480611867576040805162461bcd60e51b815260206004820152601760248201527f6f6e6c792063757272656e742076616c696461746f7273000000000000000000604482015290519081900360640190fd5b6000190192915050565b600b5461191657611880615f36565b60015460005b8181101561191257600b8054600181018255600091909152835160008051602061639283398151915260169092029182019081556020850151600080516020616ad08339815191528301805460ff19169115159190911790556040850151859261190491600080516020616417833981519152909101906014615f5a565b505050806001019050611886565b5050505b6008546119235760036008555b600a54611930576002600a555b600061193b336117fc565b905061194681611216565b6119815760405162461bcd60e51b81526004018080602001828103825260238152602001806162b56023913960400191505060405180910390fd5b6114f233826145e7565b600981565b61100781565b600381565b60c881565b61100681565b6040518061062001604052806105ef81526020016164586105ef913981565b60005460ff1681565b6402540be40081565b60005460ff16611a2a576040805162461bcd60e51b81526020600482015260196024820152781d1a194818dbdb9d1c9858dd081b9bdd081a5b9a5d081e595d603a1b604482015290519081900360640190fd5b3361100714611a6a5760405162461bcd60e51b815260040180806020018281038252602e81526020018061631e602e913960400191505060405180910390fd5b611ad484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080518082019091526013815272065787069726554696d655365636f6e6447617606c1b6020820152915061467f9050565b15611baf5760208114611b185760405162461bcd60e51b81526004018080602001828103825260268152602001806163b26026913960400191505060405180910390fd5b604080516020601f8401819004810282018101909252828152600091611b569185858083850183828082843760009201919091525061476692505050565b905060648110158015611b6c5750620186a08111155b611ba75760405162461bcd60e51b81526004018080602001828103825260278152602001806162456027913960400191505060405180910390fd5b6002556124d2565b611c0f84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260098152686275726e526174696f60b81b6020820152915061467f9050565b15611cff5760208114611c69576040805162461bcd60e51b815260206004820152601c60248201527f6c656e677468206f66206275726e526174696f206d69736d6174636800000000604482015290519081900360640190fd5b604080516020601f8401819004810282018101909252828152600091611ca79185858083850183828082843760009201919091525061476692505050565b9050612710811115611cea5760405162461bcd60e51b815260040180806020018281038252602b8152602001806161ef602b913960400191505060405180910390fd5b6006556007805460ff191660011790556124d2565b611d6984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260138152726d61784e756d4f664d61696e7461696e696e6760681b6020820152915061467f9050565b15611e415760208114611dad5760405162461bcd60e51b815260040180806020018281038252602681526020018061608f6026913960400191505060405180910390fd5b604080516020601f8401819004810282018101909252828152600091611deb9185858083850183828082843760009201919091525061476692505050565b600c5490915080611dfa575060155b808210611e385760405162461bcd60e51b81526004018080602001828103825260388152602001806161066038913960400191505060405180910390fd5b506008556124d2565b611eaa84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260128152716d61696e7461696e536c6173685363616c6560701b6020820152915061467f9050565b15611f755760208114611eee5760405162461bcd60e51b81526004018080602001828103825260258152602001806160e16025913960400191505060405180910390fd5b604080516020601f8401819004810282018101909252828152600091611f2c9185858083850183828082843760009201919091525061476692505050565b905060008111611f6d5760405162461bcd60e51b815260040180806020018281038252602d815260200180616aa3602d913960400191505060405180910390fd5b600a556124d2565b611fe984848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601981527f6d61784e756d4f66576f726b696e6743616e64696461746573000000000000006020820152915061467f9050565b156120b6576020811461202d5760405162461bcd60e51b815260040180806020018281038252602c8152602001806160b5602c913960400191505060405180910390fd5b604080516020601f840181900481028201810190925282815260009161206b9185858083850183828082843760009201919091525061476692505050565b9050600d548111156120ae5760405162461bcd60e51b815260040180806020018281038252604981526020018061626c6049913960600191505060405180910390fd5b600e556124d2565b61211f84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260128152716d61784e756d4f6643616e6469646174657360701b6020820152915061467f9050565b156121c057602081146121635760405162461bcd60e51b815260040180806020018281038252602581526020018061634c6025913960400191505060405180910390fd5b604080516020601f84018190048102820181019092528281526000916121a19185858083850183828082843760009201919091525061476692505050565b600d819055600e549091508110156121ba57600d54600e555b506124d2565b61222484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600d81526c6e756d4f66436162696e65747360981b6020820152915061467f9050565b15612345576020811461227e576040805162461bcd60e51b815260206004820181905260248201527f6c656e677468206f66206e756d4f66436162696e657473206d69736d61746368604482015290519081900360640190fd5b604080516020601f84018190048102820181019092528281526000916122bc9185858083850183828082843760009201919091525061476692505050565b9050600081116122fd5760405162461bcd60e51b815260040180806020018281038252602881526020018061613e6028913960400191505060405180910390fd5b602981111561233d5760405162461bcd60e51b81526004018080602001828103825260398152602001806161666039913960400191505060405180910390fd5b600c556124d2565b6123b084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260148152731cda185c9a5b99d4995dd85c9914195c98d95b9d60621b6020820152915061467f9050565b1561249557602081146123f45760405162461bcd60e51b81526004018080602001828103825260278152602001806161c86027913960400191505060405180910390fd5b604080516020601f84018190048102820181019092528281526000916124329185858083850183828082843760009201919091525061476692505050565b90506127108111156124755760405162461bcd60e51b815260040180806020018281038252603f8152602001806163d8603f913960400191505060405180910390fd5b60115460ff1661248d576011805460ff191660011790555b6010556124d2565b6040805162461bcd60e51b815260206004820152600d60248201526c756e6b6e6f776e20706172616d60981b604482015290519081900360640190fd5b7f6cdb0ac70ab7f2e2d035cca5be60d89906f2dede7648ddbd7402189c1eeed17a848484846040518080602001806020018381038352878782818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600083820152604051601f909101601f19169092018290039850909650505050505050a150505050565b60046020526000908152604090205481565b6001546060906000805b828110156125a557612591816112e5565b1561259d576001909101905b600101612580565b506060816040519080825280602002602001820160405280156125d2578160200160208202803683370190505b5090506000915060005b83811015612651576125ed816112e5565b1561264957600181815481106125ff57fe5b600091825260209091206004909102015482516001600160a01b039091169083908590811061262a57fe5b6001600160a01b03909216602092830291909101909101526001909201915b6001016125dc565b509250505090565b601581565b61100281565b600061266e612576565b519050600080600c5411612683576015612687565b600c545b905080821115612695578091505b8161269f57600191505b5090565b67016345785d8a000081565b60055481565b61100381565b602981565b60005460ff1615612718576040805162461bcd60e51b815260206004820152601960248201527f74686520636f6e747261637420616c726561647920696e697400000000000000604482015290519081900360640190fd5b612720615f94565b60006127466040518061062001604052806105ef81526020016164586105ef9139612f14565b91509150806127865760405162461bcd60e51b81526004018080602001828103825260218152602001806164376021913960400191505060405180910390fd5b60005b8260200151518110156128ab576001836020015182815181106127a857fe5b60209081029190910181015182546001818101855560009485528385208351600493840290910180546001600160a01b039283166001600160a01b03199182161782558587015182850180549185169183169190911790556040860151600283018054606089015160808a01511515600160e01b0260ff60e01b196001600160401b03909216600160a01b0267ffffffffffffffff60a01b199590981692909516919091179290921694909417161790915560a09093015160039093019290925591860151805191850193918590811061287e57fe5b602090810291909101810151516001600160a01b0316825281019190915260400160002055600101612789565b50506103e8600255506000805460ff19166001179055565b600d5481565b33611001146129095760405162461bcd60e51b8152600401808060200182810382526029815260200180616af06029913960400191505060405180910390fd5b600b546129ae57612918615f36565b60015460005b818110156129aa57600b8054600181018255600091909152835160008051602061639283398151915260169092029182019081556020850151600080516020616ad08339815191528301805460ff19169115159190911790556040850151859261299c91600080516020616417833981519152909101906014615f5a565b50505080600101905061291e565b5050505b60006129b98261476b565b90506129c481611216565b156129d3576129d382826145e7565b5050565b606581565b334114612a1a5760405162461bcd60e51b815260040180806020018281038252602d815260200180616a76602d913960400191505060405180910390fd5b60005460ff16612a6d576040805162461bcd60e51b81526020600482015260196024820152781d1a194818dbdb9d1c9858dd081b9bdd081a5b9a5d081e595d603a1b604482015290519081900360640190fd5b600b54612b1257612a7c615f36565b60015460005b81811015612b0e57600b8054600181018255600091909152835160008051602061639283398151915260169092029182019081556020850151600080516020616ad08339815191528301805460ff191691151591909117905560408501518592612b0091600080516020616417833981519152909101906014615f5a565b505050806001019050612a82565b5050505b6001600160a01b0381166000908152600460205260409020546007543491906103e89060ff1615612b4257506006545b600083118015612b525750600081115b15612bfb576000612b7b612710612b6f868563ffffffff61493416565b9063ffffffff61498d16565b90508015612bf95760405161dead9082156108fc029083906000818181858888f19350505050158015612bb2573d6000803e3d6000fd5b506040805182815290517f627059660ea01c4733a328effb2294d2f86905bf806da763a89cee254de8bee59181900360200190a1612bf6848263ffffffff6149cf16565b93505b505b8115612c8e576000600180840381548110612c1257fe5b9060005260206000209060040201905080600201601c9054906101000a900460ff1615612c7d576040805185815290516001600160a01b038716917ff177e5d6c5764d79c32883ed824111d9b13f5668cf6ab1cc12dd36791dd955b4919081900360200190a2612c88565b612c88858486614a11565b50612cce565b6040805184815290516001600160a01b038616917ff177e5d6c5764d79c32883ed824111d9b13f5668cf6ab1cc12dd36791dd955b4919081900360200190a25b50505050565b600e5481565b61100081565b600f5481565b61dead81565b600b8181548110612cf957fe5b60009182526020909120601690910201805460019091015490915060ff1682565b61100481565b6000600a5460001480612d31575081155b80612d3c5750600954155b15612d49575060006111f5565b600960008154809291906001900391905055506000612d96600a54612b6f85612b6f600b8981548110612d7857fe5b6000918252602090912060169091020154439063ffffffff6149cf16565b90506000600b8581548110612da757fe5b906000526020600020906016020160010160006101000a81548160ff0219169083151502179055506000806110016001600160a01b0316638256ace66040518163ffffffff1660e01b8152600401604080518083038186803b158015612e0c57600080fd5b505afa158015612e20573d6000803e3d6000fd5b505050506040513d6040811015612e3657600080fd5b508051602090910151600095509092509050808310612ec457612e598787614157565b50604080516305bfb49960e41b81526001600160a01b0389166004820152905161100191635bfb499091602480830192600092919082900301818387803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b5050505060019350612ed6565b818310612ed657612ed48761476b565b505b6040516001600160a01b038816907fb9d38178dc641ff1817967a63c9078cbcd955a9f1fcd75e0e3636de615d44d3b90600090a25050509392505050565b612f1c615f94565b6000612f26615f94565b612f2e615fac565b612f3f612f3a86614bc0565b614be5565b90506000805b612f4e83614c2f565b1561305f5780612f7357612f69612f6484614c50565b614c9e565b60ff168452613057565b8060011415613052576060612f8f612f8a85614c50565b614d55565b90508051604051908082528060200260200182016040528015612fcc57816020015b612fb9615fcc565b815260200190600190039081612fb15790505b50602086015260005b815181101561304757612fe6615fcc565b6000613004848481518110612ff757fe5b6020026020010151614e26565b915091508061302157876000995099505050505050505050613068565b818860200151848151811061303257fe5b60209081029190910101525050600101612fd5565b506001925050613057565b61305f565b600101612f45565b50919350909150505b915091565b604080516001808252818301909252606091829190816020015b60608152602001906001900390816130875790505090506130ad8363ffffffff16614f03565b816000815181106130ba57fe5b60200260200101819052506111f581614f16565b60008060606130dc84614fa0565b9150915081613189577f70e72399380dcfb0338abc03dc8d47f9f470ada8e769c9a78d644ea97385ecb2816040518080602001828103825283818151815260200191508051906020019080838360005b8381101561314457818101518382015260200161312c565b50505050905090810190601f1680156131715780820380516001836020036101000a031916815260200191505b509250505060405180910390a16066925050506112e0565b5050606061319683615082565b600154600f54919250600091829190156132a2576000805b828110156131f1576131e7600b82815481106131c657fe5b6000918252602082206002601690920201010154839063ffffffff61525216565b91506001016131ae565b50801561329b5760005b8281101561329957600061323c83612b6f600b858154811061321957fe5b6000918252602082206002601690920201010154600f549063ffffffff61493416565b905061326f816001848154811061324f57fe5b90600052602060002090600402016003015461525290919063ffffffff16565b6001838154811061327c57fe5b6000918252602090912060036004909202010155506001016131fb565b505b506000600f555b60005b8181101561331b5767016345785d8a0000600182815481106132c357fe5b906000526020600020906004020160030154106132e557600190930192613313565b6000600182815481106132f457fe5b9060005260206000209060040201600301541115613313576001909201915b6001016132a5565b50606083604051908082528060200260200182016040528015613348578160200160208202803683370190505b509050606084604051908082528060200260200182016040528015613377578160200160208202803683370190505b5090506060856040519080825280602002602001820160405280156133a6578160200160208202803683370190505b5090506060866040519080825280602002602001820160405280156133d5578160200160208202803683370190505b5090506000606087604051908082528060200260200182016040528015613406578160200160208202803683370190505b509050606088604051908082528060200260200182016040528015613435578160200160208202803683370190505b509050600099506000985060006110046001600160a01b031663149d14d96040518163ffffffff1660e01b815260040160206040518083038186803b15801561347d57600080fd5b505afa158015613491573d6000803e3d6000fd5b505050506040513d60208110156134a757600080fd5b5051905067016345785d8a000081111561351b577f70e72399380dcfb0338abc03dc8d47f9f470ada8e769c9a78d644ea97385ecb26040518080602001828103825260218152602001806163716021913960400191505060405180910390a160689c505050505050505050505050506112e0565b60005b8981101561378c5767016345785d8a00006001828154811061353c57fe5b906000526020600020906004020160030154106136c2576001818154811061356057fe5b906000526020600020906004020160020160009054906101000a90046001600160a01b0316898d8151811061359157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006402540be400600183815481106135c657fe5b906000526020600020906004020160030154816135df57fe5b06600183815481106135ed57fe5b90600052602060002090600402016003015403905061361583826149cf90919063ffffffff16565b898e8151811061362157fe5b6020026020010181815250506001828154811061363a57fe5b906000526020600020906004020160020160009054906101000a90046001600160a01b0316878e8151811061366b57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081888e8151811061369857fe5b60209081029190910101526136b3868263ffffffff61525216565b6001909d019c95506137849050565b6000600182815481106136d157fe5b906000526020600020906004020160030154111561378457600181815481106136f657fe5b906000526020600020906004020160010160009054906101000a90046001600160a01b0316848c8151811061372757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001818154811061375457fe5b906000526020600020906004020160030154838c8151811061377257fe5b60209081029190910101526001909a01995b60010161351e565b5060008415613bca576110046001600160a01b0316636e056520868b8b8a60025442016040518663ffffffff1660e01b815260040180806020018060200180602001856001600160401b03166001600160401b03168152602001848103845288818151815260200191508051906020019060200280838360005b8381101561381e578181015183820152602001613806565b50505050905001848103835287818151815260200191508051906020019060200280838360005b8381101561385d578181015183820152602001613845565b50505050905001848103825286818151815260200191508051906020019060200280838360005b8381101561389c578181015183820152602001613884565b505050509050019750505050505050506020604051808303818588803b1580156138c557600080fd5b505af1935050505080156138eb57506040513d60208110156138e657600080fd5b505160015b613b26576040516000815260443d1015613907575060006139a2565b60046000803e60005160e01c6308c379a081146139285760009150506139a2565b60043d036004833e81513d60248201116001600160401b0382111715613953576000925050506139a2565b80830180516001600160401b038111156139745760009450505050506139a2565b8060208301013d8601811115613992576000955050505050506139a2565b601f01601f191660405250925050505b806139ad5750613a51565b60019150857fa7cdeed7d0db45e3219a6e5d60838824c16f1d39991fcfe3f963029c844bf280826040518080602001828103825283818151815260200191508051906020019080838360005b83811015613a115781810151838201526020016139f9565b50505050905090810190601f168015613a3e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a250613b21565b3d808015613a7b576040519150601f19603f3d011682016040523d82523d6000602084013e613a80565b606091505b5060019150857fbfa884552dd8921b6ce90bfe906952ae5b3b29be0cc1a951d4f62697635a3a45826040518080602001828103825283818151815260200191508051906020019080838360005b83811015613ae5578181015183820152602001613acd565b50505050905090810190601f168015613b125780820380516001836020036101000a031916815260200191505b509250505060405180910390a2505b613bca565b8015613b64576040805187815290517fa217d08e65f80c73121cd9db834d81652d544bfbf452f6d04922b16c90a37b709181900360200190a1613bc8565b604080516020808252601b908201527f6261746368207472616e736665722072657475726e2066616c7365000000000081830152905187917fa7cdeed7d0db45e3219a6e5d60838824c16f1d39991fcfe3f963029c844bf280919081900360600190a25b505b8015613d805760005b8751811015613d7e576000888281518110613bea57fe5b60200260200101519050600060018281548110613c0357fe5b60009182526020909120600160049092020181015481546001600160a01b03909116916108fc9185908110613c3457fe5b9060005260206000209060040201600301549081150290604051600060405180830381858888f1935050505090508015613cf05760018281548110613c7557fe5b60009182526020909120600160049092020181015481546001600160a01b03909116917f6c61d60f69a7beb3e1c80db7f39f37b208537cbb19da3174511b477812b2fc7d9185908110613cc457fe5b9060005260206000209060040201600301546040518082815260200191505060405180910390a2613d74565b60018281548110613cfd57fe5b60009182526020909120600160049092020181015481546001600160a01b03909116917f25d0ce7d2f0cec669a8c17efe49d195c13455bb8872b65fa610ac7f53fe4ca7d9185908110613d4c57fe5b9060005260206000209060040201600301546040518082815260200191505060405180910390a25b5050600101613bd3565b505b835115613eca5760005b8451811015613ec8576000858281518110613da157fe5b60200260200101516001600160a01b03166108fc868481518110613dc157fe5b60200260200101519081150290604051600060405180830381858888f1935050505090508015613e5757858281518110613df757fe5b60200260200101516001600160a01b03167f6c61d60f69a7beb3e1c80db7f39f37b208537cbb19da3174511b477812b2fc7d868481518110613e3557fe5b60200260200101516040518082815260200191505060405180910390a2613ebf565b858281518110613e6357fe5b60200260200101516001600160a01b03167f25d0ce7d2f0cec669a8c17efe49d195c13455bb8872b65fa610ac7f53fe4ca7d868481518110613ea157fe5b60200260200101516040518082815260200191505060405180910390a25b50600101613d8a565b505b4715613f33576040805147815290517f6ecc855f9440a9282c90913bbc91619fd44f5ec0b462af28d127b116f130aa4d9181900360200190a1604051611002904780156108fc02916000818181858888f19350505050158015613f31573d6000803e3d6000fd5b505b600060038190556005558c5115613f4d57613f4d8d6152ac565b6110016001600160a01b031663fc4333cd6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015613f8a57600080fd5b505af1158015613f9e573d6000803e3d6000fd5b50506040517fedd8d7296956dd970ab4de3f2fc03be2b0ffc615d20cd4c72c6e44f928630ebf925060009150a15060009e9d5050505050505050505050505050565b80516001600160a01b0316600090815260046020526040812054801580614031575060018082038154811061401157fe5b9060005260206000209060040201600201601c9054906101000a900460ff165b156140775782516040516001600160a01b03909116907fe209c46bebf57cf265d5d9009a00870e256d9150f3ed5281ab9d9eb3cec6e4be90600090a260009150506112e0565b6001546005546000198201118015906140cd5784516040516001600160a01b03909116907fe209c46bebf57cf265d5d9009a00870e256d9150f3ed5281ab9d9eb3cec6e4be90600090a2600093505050506112e0565b6005805460019081019091558054819060001986019081106140eb57fe5b6000918252602082206002600490920201018054921515600160e01b0260ff60e01b199093169290921790915585516040516001600160a01b03909116917ff226e7d8f547ff903d9d419cf5f54e0d7d07efa9584135a53a057c5f1f27f49a91a2506000949350505050565b6000806001838154811061416757fe5b90600052602060002090600402016003015490506000600180805490500390506001614191612576565b51116141eb576000600185815481106141a657fe5b9060005260206000209060040201600301819055506000600b85815481106141ca57fe5b60009182526020822060026016929092020101819055935061139092505050565b6040805183815290516001600160a01b038716917f3b6f9ef90462b512a1293ecec018670bf7b7f1876fb727590a8a6d7643130a70919081900360200190a26001600160a01b038516600090815260046020526040812055835b600154600019018110156143e8576001816001018154811061426357fe5b90600052602060002090600402016001828154811061427e57fe5b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b0393841617825560018085015481840180548416918616919091179055600280860180549185018054909416919095161780835584546001600160401b03600160a01b91829004160267ffffffffffffffff60a01b1990911617808355935460ff600160e01b918290041615150260ff60e01b19909416939093179055600392830154920191909155600b80549091830190811061433f57fe5b9060005260206000209060160201600b828154811061435a57fe5b600091825260209091208254601690920201908155600180830154908201805460ff191660ff909216151591909117905561439d60028083019084016014616001565b509050508060010160046000600184815481106143b657fe5b600091825260208083206004909202909101546001600160a01b03168352820192909252604001902055600101614245565b5060018054806143f457fe5b60008281526020812060046000199093019283020180546001600160a01b0319908116825560018201805490911690556002810180546001600160e81b0319169055600301559055600b80548061444757fe5b60008281526020812060166000199093019283020181815560018101805460ff1916905590614479600283018261602c565b50509055600081838161448857fe5b04905080156144ec5760015460005b818110156144e95782600182815481106144ad57fe5b90600052602060002090600402016003015401600182815481106144cd57fe5b6000918252602090912060036004909202010155600101614497565b50505b50600195945050505050565b60005b828110156145de57604080516020808201899052878401828401528251808303840181526060909201909252805191012060009083908161453857fe5b069050808501828701146145d5576000888388018151811061455657fe5b60200260200101519050888287018151811061456e57fe5b6020026020010151898489018151811061458457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508089838801815181106145b357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050505b506001016144fb565b50505050505050565b600980546001908101909155600b80548390811061460157fe5b906000526020600020906016020160010160006101000a81548160ff02191690831515021790555043600b828154811061463757fe5b600091825260208220601690910201919091556040516001600160a01b038416917ff62981a567ec3cec866c6fa93c55bcdf841d6292d18b8d522ececa769375d82d91a25050565b6000816040516020018082805190602001908083835b602083106146b45780518252601f199092019160209182019101614695565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120836040516020018082805190602001908083835b602083106147225780518252601f199092019160209182019101614703565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012014905092915050565b015190565b6001600160a01b03811660009081526004602052604081205480614794575060001990506112e0565b6001810390506000600182815481106147a957fe5b90600052602060002090600402016003015490506000600183815481106147cc57fe5b9060005260206000209060040201600301819055506000600b83815481106147f057fe5b600091825260208220601690910201915060028201810155600154604080518481529051600019909201916001600160a01b038816917f8cd4e147d8af98a9e3b6724021b8bf6aed2e5dac71c38f2dce8161b82585b25d919081900360200190a28061486257839450505050506112e0565b600081848161486d57fe5b04905080156149295760005b858110156148cb57816001828154811061488f57fe5b90600052602060002090600402016003015401600182815481106148af57fe5b6000918252602090912060036004909202010155600101614879565b50600180549086015b818110156149265782600182815481106148ea57fe5b906000526020600020906004020160030154016001828154811061490a57fe5b60009182526020909120600360049092020101556001016148d4565b50505b509295945050505050565b60008261494357506000611390565b8282028284828161495057fe5b04146111f55760405162461bcd60e51b81526004018080602001828103825260218152602001806162fd6021913960400191505060405180910390fd5b60006111f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506158c6565b60006111f583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615968565b60115460ff16614a2f576113886010556011805460ff191660011790555b6127106010541180614a3f575060005b15614a4957610f45565b8015614b6f57600354614a62908263ffffffff61525216565b6003819055506000600180840381548110614a7957fe5b906000526020600020906004020190506000614aa6612710612b6f6010548661493490919063ffffffff16565b90506000614aba848363ffffffff6149cf16565b6003840154909150614ad2908263ffffffff61525216565b6003840155600f54614aea908363ffffffff61525216565b600f556040805182815290516001600160a01b038816917f93a090ecc682c002995fad3c85b30c5651d7fd29b0be5da9d784a3302aedc055919081900360200190a26040805183815290516001600160a01b038816917fddda402f13949fab222ab7c73bf9f8a7970dba70c94966ea06d3cad136af237b919081900360200190a25050505b6000600b6001840381548110614b8157fe5b90600052602060002090601602019050614bb4600182600201600060148110614ba657fe5b01549063ffffffff61525216565b60029190910155505050565b614bc861603b565b506040805180820190915281518152602082810190820152919050565b614bed615fac565b614bf6826159c2565b614bff57600080fd5b6000614c0e83602001516159fc565b60208085015160408051808201909152868152920190820152915050919050565b6000614c3961603b565b505080518051602091820151919092015191011190565b614c5861603b565b614c6182614c2f565b614c6a57600080fd5b60208201516000614c7a82615a5f565b80830160209586015260408051808201909152908152938401919091525090919050565b805160009015801590614cb357508151602110155b614cbc57600080fd5b6000614ccb83602001516159fc565b90508083600001511015614d26576040805162461bcd60e51b815260206004820152601a60248201527f6c656e677468206973206c657373207468616e206f6666736574000000000000604482015290519081900360640190fd5b825160208085015183018051928490039291831015614d4c57826020036101000a820491505b50949350505050565b6060614d60826159c2565b614d6957600080fd5b6000614d7483615b92565b9050606081604051908082528060200260200182016040528015614db257816020015b614d9f61603b565b815260200190600190039081614d975790505b5090506000614dc485602001516159fc565b60208601510190506000805b84811015614e1b57614de183615a5f565b9150604051806040016040528083815260200184815250848281518110614e0457fe5b602090810291909101015291810191600101614dd0565b509195945050505050565b614e2e615fcc565b6000614e38615fcc565b614e40615fac565b614e4985614be5565b90506000805b614e5883614c2f565b1561305f5780614e8357614e73614e6e84614c50565b615bee565b6001600160a01b03168452614efb565b8060011415614eab57614e98614e6e84614c50565b6001600160a01b03166020850152614efb565b8060021415614ed357614ec0614e6e84614c50565b6001600160a01b03166040850152614efb565b806003141561305257614ee8612f6484614c50565b6001600160401b03166060850152600191505b600101614e4f565b6060611390614f1183615c08565b615cee565b6060815160001415614f3757506040805160008152602081019091526112e0565b606082600081518110614f4657fe5b602002602001015190506000600190505b8351811015614f8757614f7d82858381518110614f7057fe5b6020026020010151615d40565b9150600101614f57565b506111f5614f9a825160c060ff16615dbd565b82615d40565b60006060602983511115614fd257600060405180606001604052806029815260200161619f6029913991509150613068565b60005b83518110156150685760005b8181101561505f57848181518110614ff557fe5b6020026020010151600001516001600160a01b031685838151811061501657fe5b6020026020010151600001516001600160a01b031614156150575760006040518060600160405280602b815260200161621a602b9139935093505050613068565b600101614fe1565b50600101614fd5565b505060408051602081019091526000815260019150915091565b6060600080808080615092612664565b6001549091505b80156151a057600181039250600b83815481106150b257fe5b600091825260209091206001601690920201015460ff166150d257615197565b600183815481106150df57fe5b60009182526020909120600490910201546001600160a01b03169450615106858484612d20565b9350831580615119575060018851038610155b1561512357615197565b60005b885181101561519557856001600160a01b031689828151811061514557fe5b6020026020010151600001516001600160a01b0316141561518d57600189828151811061516e57fe5b6020908102919091010151901515608090910152600190960195615195565b600101615126565b505b60001901615099565b50848751036040519080825280602002602001820160405280156151de57816020015b6151cb615fcc565b8152602001906001900390816151c35790505b5095506000915060005b8751811015615247578781815181106151fd57fe5b60200260200101516080015161523f5787818151811061521957fe5b602002602001015187848151811061522d57fe5b60209081029190910101526001909201915b6001016151e8565b505050505050919050565b6000828201838110156111f5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600154815160005b828110156153c95760016152c6615fcc565b600183815481106152d357fe5b600091825260208083206040805160c08101825260049490940290910180546001600160a01b0390811685526001820154811693850193909352600281015492831691840191909152600160a01b82046001600160401b03166060840152600160e01b90910460ff16151560808301526003015460a082015291505b8481101561539d5786818151811061536357fe5b6020026020010151600001516001600160a01b031682600001516001600160a01b03161415615395576000925061539d565b60010161534f565b5081156153bf5780516001600160a01b03166000908152600460205260408120555b50506001016152b4565b508082111561547a57805b828110156154785760018054806153e757fe5b60008281526020812060046000199093019283020180546001600160a01b0319908116825560018201805490911690556002810180546001600160e81b0319169055600301559055600b80548061543a57fe5b60008281526020812060166000199093019283020181815560018101805460ff191690559061546c600283018261602c565b505090556001016153d4565b505b6000818310615489578161548b565b825b905060005b818110156156855761553d8582815181106154a757fe5b6020026020010151600183815481106154bc57fe5b60009182526020918290206040805160c08101825260049390930290910180546001600160a01b0390811684526001820154811694840194909452600281015493841691830191909152600160a01b83046001600160401b03166060830152600160e01b90920460ff161515608082015260039091015460a0820152615eb5565b61565857806001016004600087848151811061555557fe5b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555084818151811061559157fe5b6020026020010151600182815481106155a657fe5b6000918252602091829020835160049092020180546001600160a01b039283166001600160a01b0319918216178255928401516001820180549184169185169190911790556040840151600282018054606087015160808801511515600160e01b0260ff60e01b196001600160401b03909216600160a01b0267ffffffffffffffff60a01b1995909716929097169190911792909216939093171692909217905560a09091015160039091015561567d565b60006001828154811061566757fe5b9060005260206000209060040201600301819055505b600101615490565b508282111561582a57615696615f36565b835b838110156158275760018682815181106156ae57fe5b6020908102919091018101518254600181810185556000948552838520835160049093020180546001600160a01b039384166001600160a01b0319918216178255848601518284018054918616918316919091179055604080860151600284018054606089015160808a01511515600160e01b0260ff60e01b196001600160401b03909216600160a01b0267ffffffffffffffff60a01b1995909a1692909616919091179290921696909617169190911790935560a090930151600390930192909255600b8054928301815590935284516016909102600080516020616392833981519152810191825591850151600080516020616ad08339815191528301805491151560ff19909216919091179055918401518492916157e391600080516020616417833981519152909101906014615f5a565b50505080600101600460008884815181106157fa57fe5b602090810291909101810151516001600160a01b0316825281019190915260400160002055600101615698565b50505b6000600981905560015493505b838110156158bf576000600b828154811061584e57fe5b60009182526020822060169190910201600101805460ff191692151592909217909155600b80548390811061587f57fe5b9060005260206000209060160201600001819055506000600b82815481106158a357fe5b6000918252602082206002601690920201010155600101615837565b5050505050565b600081836159525760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156159175781810151838201526020016158ff565b50505050905090810190601f1680156159445780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161595e57fe5b0495945050505050565b600081848411156159ba5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156159175781810151838201526020016158ff565b505050900390565b80516000906159d3575060006112e0565b6020820151805160001a9060c08210156159f2576000925050506112e0565b5060019392505050565b8051600090811a6080811015615a165760009150506112e0565b60b8811080615a31575060c08110801590615a31575060f881105b15615a405760019150506112e0565b60c0811015615a545760b5190190506112e0565b60f5190190506112e0565b80516000908190811a6080811015615a7a5760019150615b8b565b60b8811015615a8f57607e1981019150615b8b565b60c0811015615b0957600060b78203600186019550806020036101000a865104915060018101820193505080831015615b03576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b50615b8b565b60f8811015615b1e5760be1981019150615b8b565b600060f78203600186019550806020036101000a865104915060018101820193505080831015615b89576040805162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015290519081900360640190fd5b505b5092915050565b8051600090615ba3575060006112e0565b60008090506000615bb784602001516159fc565b602085015185519181019250015b80821015615be557615bd682615a5f565b60019093019290910190615bc5565b50909392505050565b8051600090601514615bff57600080fd5b61139082614c9e565b604080516020808252818301909252606091829190602082018180368337505050602081018490529050600067ffffffffffffffff198416615c4c57506018615c70565b6fffffffffffffffffffffffffffffffff198416615c6c57506010615c70565b5060005b6020811015615ca657818181518110615c8557fe5b01602001516001600160f81b03191615615c9e57615ca6565b600101615c70565b60008160200390506060816040519080825280601f01601f191660200182016040528015615cdb576020820181803683370190505b5080830196909652508452509192915050565b606081516001148015615d205750607f60f81b82600081518110615d0e57fe5b01602001516001600160f81b03191611155b15615d2c5750806112e0565b611390615d3e8351608060ff16615dbd565b835b6060806040519050835180825260208201818101602087015b81831015615d71578051835260209283019201615d59565b50855184518101855292509050808201602086015b81831015615d9e578051835260209283019201615d86565b508651929092011591909101601f01601f191660405250905092915050565b6060680100000000000000008310615e0d576040805162461bcd60e51b815260206004820152600e60248201526d696e70757420746f6f206c6f6e6760901b604482015290519081900360640190fd5b60408051600180825281830190925260609160208201818036833701905050905060378411615e675782840160f81b81600081518110615e4957fe5b60200101906001600160f81b031916908160001a9053509050611390565b6060615e7285615c08565b90508381510160370160f81b82600081518110615e8b57fe5b60200101906001600160f81b031916908160001a905350615eac8282615d40565b95945050505050565b805182516000916001600160a01b039182169116148015615eef575081602001516001600160a01b031683602001516001600160a01b0316145b8015615f14575081604001516001600160a01b031683604001516001600160a01b0316145b80156111f55750506060908101519101516001600160401b0390811691161490565b6040805160608101825260008082526020820152908101615f55616055565b905290565b8260148101928215615f88579160200282015b82811115615f88578251825591602001919060010190615f6d565b5061269f929150616074565b60408051808201909152600081526060602082015290565b6040518060400160405280615fbf61603b565b8152602001600081525090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b8260148101928215615f88579182015b82811115615f88578254825591600101919060010190616011565b506114f2906014810190616074565b604051806040016040528060008152602001600081525090565b6040518061028001604052806014906020820280368337509192915050565b61160891905b8082111561269f576000815560010161607a56fe6c656e677468206f66206d61784e756d4f664d61696e7461696e696e67206d69736d617463686c656e677468206f66206d61784e756d4f66576f726b696e6743616e64696461746573206d69736d617463686c656e677468206f66206d61696e7461696e536c6173685363616c65206d69736d61746368746865206d61784e756d4f664d61696e7461696e696e67206d757374206265206c657373207468616e206e756d4f6643616e696e61746573746865206e756d4f66436162696e657473206d7573742062652067726561746572207468616e2030746865206e756d4f66436162696e657473206d757374206265206c657373207468616e204d41585f4e554d5f4f465f56414c494441544f5253746865206e756d626572206f662076616c696461746f72732065786365656420746865206c696d69746c656e677468206f662073686172696e6752657761726450657263656e74206d69736d61746368746865206275726e526174696f206d757374206265206e6f2067726561746572207468616e2031303030306475706c696361746520636f6e73656e7375732061646472657373206f662076616c696461746f725365747468652065787069726554696d655365636f6e64476170206973206f7574206f662072616e6765746865206d61784e756d4f66576f726b696e6743616e64696461746573206d757374206265206e6f742067726561746572207468616e206d61784e756d4f6643616e6469646174657363616e206e6f7420656e7465722054656d706f72617279204d61696e74656e616e63656c656e677468206f66206a61696c2076616c696461746f7273206d757374206265206f6e65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77746865206d6573736167652073656e646572206d75737420626520676f7665726e616e636520636f6e74726163746c656e677468206f66206d61784e756d4f6643616e64696461746573206d69736d61746368666565206973206c6172676572207468616e2044555354595f494e434f4d494e470175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db96c656e677468206f662065787069726554696d655365636f6e64476170206d69736d617463687468652073686172696e6752657761726450657263656e74206d757374206265206c657373207468616e2053484152494e475f5245574152445f5343414c450175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dbb6661696c656420746f20706172736520696e69742076616c696461746f72536574f905ec80f905e8f846942a7cdd959bfe8d9487b2a43b33565295a698f7e294b6a7edd747c0554875d3fc531d19ba1497992c5e941ff80f3f7f110ffd8920a3ac38fdef318fe94a3f86048c27395000f846946488aa4d1955ee33403f8ccb1d4de5fb97c7ade294220f003d8bdfaadf52aa1e55ae4cc485e6794875941a87e90e440a39c99aa9cb5cea0ad6a3f0b2407b86048c27395000f846949ef9f4360c606c7ab4db26b016007d3ad0ab86a0946103af86a874b705854033438383c82575f25bc29418e2db06cbff3e3c5f856410a1838649e760175786048c27395000f84694ee01c3b1283aa067c58eab4709f85e99d46de5fe94ee4b9bfb1871c64e2bcabb1dc382dc8b7c4218a29415904ab26ab0e99d70b51c220ccdcccabee6e29786048c27395000f84694685b1ded8013785d6623cc18d214320b6bb6475994a20ef4e5e4e7e36258dbf51f4d905114cb1b34bc9413e39085dc88704f4394d35209a02b1a9520320c86048c27395000f8469478f3adfc719c99674c072166708589033e2d9afe9448a30d5eaa7b64492a160f139e2da2800ec3834e94055838358c29edf4dcc1ba1985ad58aedbb6be2b86048c27395000f84694c2be4ec20253b8642161bc3f444f53679c1f3d479466f50c616d737e60d7ca6311ff0d9c434197898a94d1d678a2506eeaa365056fe565df8bc8659f28b086048c27395000f846942f7be8361c80a4c1e7e9aaf001d0877f1cfde218945f93992ac37f3e61db2ef8a587a436a161fd210b94ecbc4fb1a97861344dad0867ca3cba2b860411f086048c27395000f84694ce2fd7544e0b2cc94692d4a704debef7bcb613289444abc67b4b2fba283c582387f54c9cba7c34bafa948acc2ab395ded08bb75ce85bf0f95ad2abc51ad586048c27395000f84694b8f7166496996a7da21cf1f1b04d9b3e26a3d077946770572763289aac606e4f327c2f6cc1aa3b3e3b94882d745ed97d4422ca8da1c22ec49d880c4c097286048c27395000f846942d4c407bbe49438ed859fe965b140dcf1aab71a9943ad0939e120f33518fbba04631afe7a3ed6327b194b2bbb170ca4e499a2b0f3cc85ebfa6e8c4dfcbea86048c27395000f846946bbad7cf34b5fa511d8e963dbba288b1960e75d694853b0f6c324d1f4e76c8266942337ac1b0af1a229442498946a51ca5924552ead6fc2af08b94fcba648601d1a94a2000f846944430b3230294d12c6ab2aac5c2cd68e80b16b581947b107f4976a252a6939b771202c28e64e03f52d694795811a7f214084116949fc4f53cedbf189eeab28601d1a94a2000f84694ea0a6e3c511bbd10f4519ece37dc24887e11b55d946811ca77acfb221a49393c193f3a22db829fcc8e9464feb7c04830dd9ace164fc5c52b3f5a29e5018a8601d1a94a2000f846947ae2f5b9e386cd1b50a4550696d957cb4900f03a94e83bcc5077e6b873995c24bac871b5ad856047e19464e48d4057a90b233e026c1041e6012ada897fe88601d1a94a2000f8469482012708dafc9e1b880fd083b32182b869be8e09948e5adc73a2d233a1b496ed3115464dd6c7b887509428b383d324bc9a37f4e276190796ba5a8947f5ed8601d1a94a2000f8469422b81f8e175ffde54d797fe11eb03f9e3bf75f1d94a1c3ef7ca38d8ba80cce3bfc53ebd2903ed21658942767f7447f7b9b70313d4147b795414aecea54718601d1a94a2000f8469468bf0b8b6fb4e317a0f9d6f03eaf8ce6675bc60d94675cfe570b7902623f47e7f59c9664b5f5065dcf94d84f0d2e50bcf00f2fc476e1c57f5ca2d57f625b8601d1a94a2000f846948c4d90829ce8f72d0163c1d5cf348a862d5506309485c42a7b34309bee2ed6a235f86d16f059deec5894cc2cedc53f0fa6d376336efb67e43d167169f3b78601d1a94a2000f8469435e7a025f4da968de7e4d7e4004197917f4070f194b1182abaeeb3b4d8eba7e6a4162eac7ace23d57394c4fd0d870da52e73de2dd8ded19fe3d26f43a1138601d1a94a2000f84694d6caa02bbebaebb5d7e581e4b66559e635f805ff94c07335cf083c1c46a487f0325769d88e163b653694efaff03b42e41f953a925fc43720e45fb61a19938601d1a94a2000746865206d6573736167652073656e646572206d7573742062652063726f737320636861696e20636f6e7472616374746865206d6573736167652073656e646572206d7573742062652074686520626c6f636b2070726f6475636572746865206d61696e7461696e536c6173685363616c65206d7573742062652067726561746572207468616e20300175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01dba746865206d6573736167652073656e646572206d75737420626520736c61736820636f6e7472616374a2646970667358221220bb07e798a182417d301be09fcf9388377663c451526031d96ee283a5015bc0fb64736f6c63430006040033";
    vm.etch(address(validator), validatorCode);

    burnRatio = validator.INIT_BURN_RATIO();
    burnRatioScale = validator.BURN_RATIO_SCALE();
    validators = validator.getValidators();
    totalInComing = validator.totalInComing();
    maxNumOfWorkingCandidates = validator.maxNumOfWorkingCandidates();
    numOfCabinets = validator.numOfCabinets();

    coinbase = block.coinbase;
    vm.deal(coinbase, 100 ether);

    vm.startPrank(coinbase);
    validator.deposit{value: 0}(validators[0]);
    vm.stopPrank();
    sharingRewardPercent = validator.sharingRewardPercent();
    sharingRewardScale = validator.SHARING_REWARD_SCALE();
  }

  function testDeposit(uint256 amount) public {
    vm.assume(amount >= 1e16);
    vm.assume(amount <= 1e19);
    vm.expectRevert("the message sender must be the block producer");
    validator.deposit{value: amount}(validators[0]);

    vm.startPrank(coinbase);
    validator.deposit(validators[0]);

    uint256 leftAmount = amount - amount * burnRatio / burnRatioScale;
    uint256 sharing = leftAmount * sharingRewardPercent / sharingRewardScale;
    uint256 deposit = leftAmount - sharing;
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorDeposit(validators[0], deposit);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorSharing(validators[0], sharing);
    validator.deposit{value: amount}(validators[0]);

    address newAccount = addrSet[addrIdx++];
    vm.expectEmit(true, false, false, true, address(validator));
    emit deprecatedDeposit(newAccount, leftAmount);
    validator.deposit{value: amount}(newAccount);

    assertEq(validator.totalInComing(), totalInComing + deposit + sharing);
    assertEq(validator.sharingRewardFundingPool(), sharing);
    vm.stopPrank();
  }

  function testBurn(uint8 coefficient) public {
    vm.assume(coefficient < 10000);
    bytes32 co = bytes32(uint256(coefficient));
    bytes memory key = "burnRatio";
    bytes memory value = new bytes(32);
    assembly {
      mstore(add(value, 32), co)
      mstore(add(add(value, 32), 32), add(co, 32))
    }

    updateParamByGovHub(key, value, address(validator));

    burnRatio = validator.burnRatio();
    assertEq(burnRatio, coefficient);

    vm.startPrank(coinbase);
    uint256 amount = 1 ether;
    uint256 leftAmount = amount - amount * burnRatio / burnRatioScale;
    uint256 sharing = leftAmount * sharingRewardPercent / sharingRewardScale;
    uint256 deposit = leftAmount - sharing;
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorDeposit(validators[0], deposit);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorSharing(validators[0], sharing);
    validator.deposit{value: amount}(validators[0]);
    vm.stopPrank();
  }

  function testGov() public {
    bytes memory key = "maxNumOfWorkingCandidates";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000000015"); // 21
    vm.expectEmit(false, false, false, true, address(govHub));
    emit failReasonWithStr("the maxNumOfWorkingCandidates must be not greater than maxNumOfCandidates");
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.maxNumOfWorkingCandidates(), maxNumOfWorkingCandidates);

    value = bytes(hex"000000000000000000000000000000000000000000000000000000000000000a"); // 10
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.maxNumOfWorkingCandidates(), 10);

    key = "maxNumOfCandidates";
    value = bytes(hex"0000000000000000000000000000000000000000000000000000000000000005"); // 5
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.maxNumOfCandidates(), 5);
    assertEq(validator.maxNumOfWorkingCandidates(), 5);
  }

  function testGetMiningValidatorsWith41Vals() public {
    address[] memory newValidators = new address[](41);
    for (uint256 i; i < 41; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidators));
    vm.stopPrank();

    address[] memory vals = validator.getValidators();
    address[] memory miningVals = validator.getMiningValidators();
    uint256 count;
    uint256 _numOfCabinets;
    if (numOfCabinets == 0) {
      _numOfCabinets = validator.INIT_NUM_OF_CABINETS();
    } else {
      _numOfCabinets = numOfCabinets;
    }
    for (uint256 i; i < _numOfCabinets; ++i) {
      cabinets[vals[i]] = true;
    }
    for (uint256 i; i < miningVals.length; ++i) {
      if (!cabinets[miningVals[i]]) {
        ++count;
      }
    }
    assertGe(maxNumOfWorkingCandidates, count);
    assertGe(count, 0);
  }

  function testDistributeAlgorithm() public {
    address[] memory newValidator = new address[](1);
    newValidator[0] = addrSet[addrIdx++];

    // To reset the incoming
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidator));
    vm.stopPrank();

    address val = newValidator[0];
    address tmp = addrSet[addrIdx++];
    vm.deal(address(validator), 0);

    vm.startPrank(coinbase);
    for (uint256 i; i < 5; ++i) {
      validator.deposit{value: 1 ether}(val);
      validator.deposit{value: 1 ether}(tmp);
      validator.deposit{value: 0.1 ether}(val);
      validator.deposit{value: 0.1 ether}(tmp);
    }
    vm.stopPrank();

    uint256 balance = address(validator).balance;
    uint256 incoming = validator.totalInComing();
    assertEq(balance, 9.9 ether);
    assertEq(incoming, 4.95 ether);

    newValidator[0] = addrSet[addrIdx++];

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransfer(4.95 ether);
    vm.expectEmit(false, false, false, true, address(validator));
    emit systemTransfer((9.9 ether - 4.95 ether));
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidator));
    vm.stopPrank();
  }

  function testMassiveDistribute() public {
    address[] memory newValidators = new address[](41);
    for (uint256 i; i < 41; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }

    // To reset the incoming
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidators));
    vm.stopPrank();

    vm.startPrank(coinbase);
    for (uint256 i; i < 41; ++i) {
      validator.deposit{value: 1 ether}(newValidators[i]);
    }
    vm.stopPrank();

    for (uint256 i; i < 41; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidators));
    vm.stopPrank();
  }

  function testDistribute41Plus() public {
    address[] memory newValidators = new address[](42);
    for (uint256 i; i < 42; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }

    // To reset the incoming
    vm.startPrank(address(crossChain));
    vm.expectEmit(false, false, false, true, address(validator));
    emit failReasonWithStr("the number of validators exceed the limit");
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidators));
    vm.stopPrank();
  }

  function testComplicateDistribute1() public {

    bytes memory key = "sharingRewardPercent";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000000000"); // 0
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), 0);

    address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    for (uint256 i; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 1e17}(newValidators[2]);
    validator.deposit{value: 1e18}(newValidators[3]);
    validator.deposit{value: 1e18}(newValidators[4]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit{value: 1e5}(newValidators[4]);
    vm.stopPrank();

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransfer(1.8 ether);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[0]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[2]), 9e16);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17 + 9e4);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, balance + 9e15);
    assertEq(newValidators[1].balance, balance + 9e15);
    assertEq(newValidators[2].balance, balance + 9e16);
    assertEq(newValidators[3].balance, balance);
    assertEq(newValidators[4].balance, balance);
    assertEq(deprecated.balance, balance);
  }

  function testValidateSetChange() public {
    address[][] memory newValSet = new address[][](5);
    for (uint256 i; i < 5; ++i) {
      address[] memory valSet = new address[](5+i);
      for (uint256 j; j < 5 + i; ++j) {
        valSet[j] = addrSet[addrIdx++];
      }
      newValSet[i] = valSet;
    }

    vm.startPrank(address(crossChain));
    for (uint256 k; k < 5; ++k) {
      validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValSet[k]));
      address[] memory valSet = validator.getValidators();
      for (uint256 l; l < 5 + k; ++l) {
        assertEq(valSet[l], newValSet[k][l], "consensusAddr not equal");
        assertTrue(validator.isCurrentValidator(newValSet[k][l]), "the address should be a validator");
      }
    }
    vm.stopPrank();
  }

  function testCannotUpdateValidatorSet() public {
    address[][] memory newValSet = new address[][](4);
    newValSet[0] = new address[](3);
    newValSet[0][0] = addrSet[addrIdx];
    newValSet[0][1] = addrSet[addrIdx++];
    newValSet[0][2] = addrSet[addrIdx++];
    newValSet[1] = new address[](3);
    newValSet[1][0] = addrSet[addrIdx++];
    newValSet[1][1] = addrSet[addrIdx];
    newValSet[1][2] = addrSet[addrIdx++];
    newValSet[2] = new address[](4);
    newValSet[2][0] = addrSet[addrIdx++];
    newValSet[2][1] = addrSet[addrIdx++];
    newValSet[2][2] = addrSet[addrIdx++];
    newValSet[2][3] = addrSet[addrIdx++];

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValSet[2]));
    for (uint256 i; i < 2; ++i) {
      vm.expectEmit(false, false, false, true, address(validator));
      emit failReasonWithStr("duplicate consensus address of validatorSet");
      validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValSet[i]));
    }
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValSet[3]));
    vm.stopPrank();

    uint256 height = block.number;
    vm.warp(height + 1);

    uint64 _sequence = crossChain.channelReceiveSequenceMap(STAKING_CHANNELID);
    vm.expectRevert(bytes("the msg sender is not a relayer"));
    crossChain.handlePackage(bytes("1"), bytes("2"), uint64(height + 1), _sequence, STAKING_CHANNELID);

    vm.startPrank(address(relayer));
    vm.expectRevert(bytes("light client not sync the block yet"));
    crossChain.handlePackage(bytes("1"), bytes("2"), uint64(height + 1), _sequence, STAKING_CHANNELID);
    vm.stopPrank();
  }

  // one validator's fee addr is a contract
  function testComplicateDistribute2() public {

    bytes memory key = "sharingRewardPercent";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000000000"); // 0
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), 0);

    address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    newValidators[0] = address(validator);
    for (uint256 i = 1; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 1e17}(newValidators[2]);
    validator.deposit{value: 1e18}(newValidators[3]);
    validator.deposit{value: 1e18}(newValidators[4]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit{value: 1e5}(newValidators[4]);
    vm.stopPrank();

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransfer(1.8 ether);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransferFail(payable(newValidators[0]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[2]), 9e16);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17 + 9e15 + 9e4);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, 0);
    assertEq(newValidators[1].balance, balance + 9e15);
    assertEq(newValidators[2].balance, balance + 9e16);
    assertEq(newValidators[3].balance, balance);
    assertEq(newValidators[4].balance, balance);
    assertEq(deprecated.balance, balance);
  }

  // cross chain transfer failed
  function testComplicateDistribute3() public {

    bytes memory key = "sharingRewardPercent";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000000000"); // 0
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), 0);

  address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    newValidators[0] = address(validator);
    for (uint256 i = 1; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    // mock tokenHub
    address mockTokenHub = deployCode("MockTokenHub.sol");
    bytes memory tokenHubCode = address(tokenHub).code;
    vm.etch(address(tokenHub), mockTokenHub.code);
    (bool success,) = address(tokenHub).call(abi.encodeWithSignature("setPanicBatchTransferOut(bool)", true));
    require(success);

    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 1e17}(newValidators[2]);
    validator.deposit{value: 1e18}(newValidators[3]);
    validator.deposit{value: 1e18}(newValidators[4]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit{value: 1e5}(newValidators[4]);
    vm.stopPrank();

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransferFailed(1.8 ether, "panic in batchTransferOut");
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[3]), 9e17);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[4]), 9e17 + 9e4);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransferFail(payable(newValidators[0]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 9e15);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[2]), 9e16);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17 + 9e15);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, 0);
    assertEq(newValidators[1].balance, balance + 9e15);
    assertEq(newValidators[2].balance, balance + 9e16);
    assertEq(newValidators[3].balance, balance + 9e17);
    assertEq(newValidators[4].balance, balance + 9e17 + 9e4);
    assertEq(deprecated.balance, balance);

    // revert token hub
    vm.etch(address(tokenHub), tokenHubCode);
  }

  function testJail() public {
    address[] memory newValidators = new address[](3);
    for (uint256 i; i < 3; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x00, newValidators));

    address[] memory remainVals = validator.getValidators();
    assertEq(remainVals.length, 3);
    for (uint256 i; i < 3; ++i) {
      assertEq(remainVals[i], newValidators[i]);
    }

    vm.expectEmit(false, false, false, true, address(validator));
    emit failReasonWithStr("length of jail validators must be one");
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x01, newValidators));

    address[] memory jailVal = new address[](1);
    jailVal[0] = newValidators[0];
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x01, jailVal));

    remainVals = validator.getValidators();
    assertEq(remainVals.length, 2);
    for (uint256 i; i < 2; ++i) {
      assertEq(remainVals[i], newValidators[i + 1]);
    }

    jailVal[0] = newValidators[1];
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x01, jailVal));
    remainVals = validator.getValidators();
    assertEq(remainVals.length, 1);
    assertEq(remainVals[0], newValidators[2]);

    jailVal[0] = newValidators[2];
    validator.handleSynPackage(STAKING_CHANNELID, _encodeValidatorSetUpdatePack(0x01, jailVal));
    remainVals = validator.getValidators();
    assertEq(remainVals.length, 1);
    assertEq(remainVals[0], newValidators[2]);
    vm.stopPrank();
  }

  function test100PercentSharing() public {
    bytes memory key = "sharingRewardPercent";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000002711"); // 10001
    vm.expectEmit(false, false, false, true, address(govHub));
    emit failReasonWithStr("the sharingRewardPercent must be less than SHARING_REWARD_SCALE");
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), sharingRewardPercent);
    assertEq(validator.SHARING_REWARD_SCALE(), sharingRewardScale);

    value = bytes(hex"0000000000000000000000000000000000000000000000000000000000002710"); // 10000
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), 10000);
    assertEq(validator.SHARING_REWARD_SCALE(), sharingRewardScale);

    vm.startPrank(coinbase);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorDeposit(validators[0], 0);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorSharing(validators[0], 9e15);
    validator.deposit{value: 1e16}(validators[0]);
    vm.stopPrank();
  }

  function testSimpleSharing() public {
    address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    for (uint256 i; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorDeposit(newValidators[0], 45e14);
    vm.expectEmit(true, false, false, true, address(validator));
    emit validatorSharing(newValidators[0], 45e14);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 2e17}(newValidators[2]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit{value: 1e5}(newValidators[0]);
    validator.deposit{value: 1e5}(newValidators[2]);
    vm.stopPrank();

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransfer(1296e14);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[0]), 44100000000081000);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 24300000000018000);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17 + 81e3);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, balance + 44100000000081000);
    assertEq(newValidators[1].balance, balance + 24300000000018000);
    assertEq(newValidators[2].balance, balance);
    assertEq(deprecated.balance, balance);
  }

  function testEmptyBlkSharing() public {
    address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    for (uint256 i; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 2e17}(newValidators[2]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit(newValidators[0]);
    validator.deposit(newValidators[2]);
    vm.stopPrank();

    vm.expectEmit(false, false, false, true, address(validator));
    emit batchTransfer(1296e14);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[0]), 441e14);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 243e14);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, balance + 441e14);
    assertEq(newValidators[1].balance, balance + 243e14);
    assertEq(newValidators[2].balance, balance);
    assertEq(deprecated.balance, balance);
  }

  function testSimple100PercentSharing() public {
    bytes memory key = "sharingRewardPercent";
    bytes memory value = bytes(hex"0000000000000000000000000000000000000000000000000000000000002710"); // 10000
    updateParamByGovHub(key, value, address(validator));
    assertEq(validator.sharingRewardPercent(), 10000);

    address[] memory newValidators = new address[](5);
    address deprecated = addrSet[addrIdx++];
    uint256 balance = deprecated.balance;
    for (uint256 i; i < 5; ++i) {
      newValidators[i] = addrSet[addrIdx++];
    }
    bytes memory pack = _encodeValidatorSetUpdatePack(0x00, newValidators);
    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    vm.startPrank(coinbase);
    validator.deposit{value: 1e16}(newValidators[0]);
    validator.deposit{value: 1e16}(newValidators[1]);
    validator.deposit{value: 2e17}(newValidators[2]);
    validator.deposit{value: 1e18}(deprecated);
    validator.deposit{value: 1e5}(newValidators[0]);
    validator.deposit{value: 1e5}(newValidators[2]);
    vm.stopPrank();

    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[0]), 792e14+72e3);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[1]), 396e14+36e3);
    vm.expectEmit(true, false, false, true, address(validator));
    emit directTransfer(payable(newValidators[2]), 792e14+72e3);
    vm.expectEmit(true, false, false, true, address(validator));
    emit systemTransfer(9e17);
    vm.expectEmit(false, false, false, false, address(validator));
    emit validatorSetUpdated();

    vm.startPrank(address(crossChain));
    validator.handleSynPackage(STAKING_CHANNELID, pack);
    vm.stopPrank();

    assertEq(newValidators[0].balance, balance + 792e14+72e3);
    assertEq(newValidators[1].balance, balance + 396e14+36e3);
    assertEq(newValidators[2].balance, balance + 792e14+72e3);
    assertEq(deprecated.balance, balance);
  }

  function _encodeValidatorSetUpdatePack(uint8 code, address[] memory valSet) internal pure returns (bytes memory) {
    bytes[] memory elements = new bytes[](2);
    elements[0] = code.encodeUint();

    bytes[] memory vals = new bytes[](valSet.length);
    for (uint256 i; i < valSet.length; ++i) {
      bytes[] memory tmp = new bytes[](4);
      tmp[0] = valSet[i].encodeAddress();
      tmp[1] = valSet[i].encodeAddress();
      tmp[2] = valSet[i].encodeAddress();
      tmp[3] = uint8(0x64).encodeUint();
      vals[i] = tmp.encodeList();
    }

    elements[1] = vals.encodeList();
    return elements.encodeList();
  }
}
